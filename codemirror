"use client"

import { useEffect, useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card } from "@/components/ui/card"
import { Download, Copy, Code, Moon, Sun, Share2 } from "lucide-react"
import { useTheme } from "next-themes"
import { EditorView, basicSetup } from "codemirror"
import { EditorState, Compartment } from "@codemirror/state"
import { javascript } from "@codemirror/lang-javascript"
import { oneDark } from "@codemirror/theme-one-dark"
import { syntaxHighlighting, HighlightStyle } from "@codemirror/language"
import { tags } from "@lezer/highlight"

export default function MermaidEditor() {
  const [code, setCode] = useState<string>(
    `graph TD
  A[Start] --> B{Is it working?}
  B -->|Yes| C[Great!]
  B -->|No| D[Debug]
  D --> B`,
  )
  const [svg, setSvg] = useState<string>("")
  const [copied, setCopied] = useState(false)
  const [zoom, setZoom] = useState(1)
  const [pan, setPan] = useState({ x: 0, y: 0 })
  const [isDragging, setIsDragging] = useState(false)
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })
  const { theme, setTheme } = useTheme()
  const [error, setError] = useState<{ message: string; line?: number } | null>(null)
  const [mermaidLoaded, setMermaidLoaded] = useState(false)

  const editorRef = useRef<HTMLDivElement>(null)
  const editorViewRef = useRef<EditorView | null>(null)
  const renderTimeout = useRef<NodeJS.Timeout | null>(null)
  const themeCompartment = useRef(new Compartment())
  const previewRef = useRef<HTMLDivElement>(null)

  // Custom highlight style for Mermaid syntax
  const mermaidHighlightStyle = HighlightStyle.define([
    { tag: tags.keyword, color: "#5c6bc0" },
    { tag: tags.operator, color: "#e91e63" },
    { tag: tags.string, color: "#8bc34a" },
    { tag: tags.number, color: "#ff9800" },
    { tag: tags.variableName, color: "#03a9f4" },
    { tag: tags.comment, color: "#90a4ae", fontStyle: "italic" },
    { tag: tags.bracket, color: "#ff5722" },
  ])

  // Initialize CodeMirror
  useEffect(() => {
    if (!editorRef.current || editorViewRef.current) return

    // Create a new editor state
    const startState = EditorState.create({
      doc: code,
      extensions: [
        basicSetup,
        javascript(), // Use JavaScript as a base for now
        syntaxHighlighting(mermaidHighlightStyle),
        themeCompartment.current.of(theme === "dark" ? oneDark : []),
        EditorView.updateListener.of((update) => {
          if (update.docChanged) {
            const newCode = update.state.doc.toString()
            setCode(newCode)

            // Debounce rendering to avoid too many renders while typing
            clearTimeout(renderTimeout.current!)
            renderTimeout.current = setTimeout(() => {
              renderDiagram(newCode)
            }, 500)
          }
        }),
        EditorView.theme({
          "&": {
            height: "400px",
            fontSize: "14px",
          },
          ".cm-scroller": {
            overflow: "auto",
          },
          "&.cm-focused": {
            outline: "none",
          },
          ".cm-line": {
            padding: "0 4px",
            lineHeight: "1.6",
            fontFamily: "monospace",
          },
          ".cm-errorLine": {
            backgroundColor: theme === "dark" ? "rgba(127, 29, 29, 0.4)" : "rgba(254, 226, 226, 0.4)",
          },
        }),
      ],
    })

    // Create the editor view
    const view = new EditorView({
      state: startState,
      parent: editorRef.current,
    })

    editorViewRef.current = view

    return () => {
      view.destroy()
      editorViewRef.current = null
    }
  }, [])

  // Update theme when it changes
  useEffect(() => {
    if (!editorViewRef.current) return

    editorViewRef.current.dispatch({
      effects: themeCompartment.current.reconfigure(theme === "dark" ? oneDark : []),
    })
  }, [theme])

  // Initialize Mermaid
  useEffect(() => {
    let mermaidInstance: any = null

    const initMermaid = async () => {
      try {
        // Import mermaid dynamically
        const mermaidModule = await import("mermaid")
        mermaidInstance = mermaidModule.default

        // Configure mermaid
        mermaidInstance.initialize({
          startOnLoad: false,
          theme: theme === "dark" ? "dark" : "default",
          securityLevel: "loose",
          logLevel: "error",
        })

        setMermaidLoaded(true)

        // Initial render
        renderMermaidDiagram(code)
      } catch (err) {
        console.error("Failed to initialize Mermaid:", err)
        setError({ message: "Failed to initialize diagram renderer" })
      }
    }

    initMermaid()

    // Prevent page scrolling when using the mouse wheel in the preview area
    const preventScroll = (e: WheelEvent) => {
      if ((e.target as HTMLElement).closest(".overflow-hidden")) {
        e.preventDefault()
      }
    }

    document.addEventListener("wheel", preventScroll, { passive: false })

    return () => {
      document.removeEventListener("wheel", preventScroll)
    }
  }, [theme])

  // Render diagram function
  const renderDiagram = (codeToRender: string) => {
    if (mermaidLoaded) {
      renderMermaidDiagram(codeToRender)
    }
  }

  // Render Mermaid diagram
  const renderMermaidDiagram = async (codeToRender: string) => {
    try {
      // Clear any previous errors
      setError(null)

      // Clear error highlighting in editor
      if (editorViewRef.current) {
        clearErrorHighlighting()
      }

      // Get the mermaid instance
      const mermaidModule = await import("mermaid")
      const mermaid = mermaidModule.default

      // Generate a unique ID for this render
      const id = `mermaid-diagram-${Date.now()}`

      // Create a temporary container for rendering
      const tempContainer = document.createElement("div")
      tempContainer.id = id
      tempContainer.style.display = "none"
      document.body.appendChild(tempContainer)

      // First parse the diagram to check for syntax errors
      try {
        await mermaid.parse(codeToRender)
      } catch (parseErr: any) {
        console.error("Mermaid parse error:", parseErr)

        // Extract line number if available
        let lineNumber: number | undefined
        const lineMatch = parseErr.message?.match(/line (\d+)/i)
        if (lineMatch && lineMatch[1]) {
          lineNumber = Number.parseInt(lineMatch[1], 10)
        }

        setError({
          message: parseErr.message || "Syntax error in diagram",
          line: lineNumber,
        })

        if (lineNumber && editorViewRef.current) {
          highlightErrorLine(lineNumber)
        }

        document.body.removeChild(tempContainer)
        return
      }

      // If parsing succeeded, render the diagram
      try {
        // Use a simpler approach with mermaid.render
        const { svg } = await mermaid.render(id, codeToRender)
        setSvg(svg)
      } catch (renderErr: any) {
        console.error("Mermaid render error:", renderErr)
        setError({
          message: renderErr.message || "Error rendering diagram",
        })
      }

      // Clean up
      document.body.removeChild(tempContainer)
    } catch (err: any) {
      console.error("Failed to render diagram:", err)
      setError({
        message: err.message || "Unknown error rendering diagram",
      })
    }
  }

  // Function to highlight error line in CodeMirror
  const highlightErrorLine = (lineNumber: number) => {
    if (!editorViewRef.current) return

    const view = editorViewRef.current
    const line = view.state.doc.line(lineNumber)

    // Add a class to the error line
    view.dispatch({
      effects: EditorView.decorations.of([
        {
          from: line.from,
          to: line.to,
          class: "cm-errorLine",
        },
      ]),
    })

    // Scroll to the error line
    view.dispatch({
      effects: EditorView.scrollIntoView(line.from, { y: "center" }),
    })
  }

  // Function to clear error highlighting
  const clearErrorHighlighting = () => {
    if (!editorViewRef.current) return

    editorViewRef.current.dispatch({
      effects: EditorView.decorations.of([]),
    })
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const downloadSvg = () => {
    const blob = new Blob([svg], { type: "image/svg+xml" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "diagram.svg"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const examples = {
    flowchart: `graph TD
    A[Start] --> B{Is it working?}
    B -->|Yes| C[Great!]
    B -->|No| D[Debug]
    D --> B`,
    sequence: `sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!`,
    classDiagram: `classDiagram
    class Animal {
      +name: string
      +eat(): void
      +sleep(): void
    }
    class Dog {
      +bark(): void
    }
    Animal <|-- Dog`,
    gantt: `gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2023-01-01, 30d
    Another task     :after a1, 20d
    section Another
    Task in sec      :2023-01-12, 12d
    another task     :24d`,
  }

  // Function to set example code
  const setExampleCode = (exampleCode: string) => {
    setCode(exampleCode)

    if (editorViewRef.current) {
      const view = editorViewRef.current
      view.dispatch({
        changes: { from: 0, to: view.state.doc.length, insert: exampleCode },
      })
    }

    renderDiagram(exampleCode)
  }

  return (
    <div className="container mx-auto p-4 max-w-7xl">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Mermaid Editor</h1>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" onClick={() => setTheme(theme === "dark" ? "light" : "dark")}>
            {theme === "dark" ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
          </Button>
          <Button variant="outline" size="sm" onClick={() => copyToClipboard()}>
            <Copy className="h-4 w-4 mr-2" />
            {copied ? "Copied!" : "Copy"}
          </Button>
          <Button variant="outline" size="sm" onClick={downloadSvg}>
            <Download className="h-4 w-4 mr-2" />
            Export SVG
          </Button>
          <Button variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-4">
          <Card className="border rounded-lg overflow-hidden">
            <div className="bg-muted p-2 border-b flex justify-between items-center">
              <div className="flex items-center">
                <Code className="h-4 w-4 mr-2" />
                <span className="text-sm font-medium">Editor</span>
              </div>
              <div className="flex gap-2">
                <Tabs defaultValue="flowchart" className="w-full">
                  <TabsList className="grid grid-cols-4 h-8">
                    <TabsTrigger value="flowchart" onClick={() => setExampleCode(examples.flowchart)}>
                      Flowchart
                    </TabsTrigger>
                    <TabsTrigger value="sequence" onClick={() => setExampleCode(examples.sequence)}>
                      Sequence
                    </TabsTrigger>
                    <TabsTrigger value="class" onClick={() => setExampleCode(examples.classDiagram)}>
                      Class
                    </TabsTrigger>
                    <TabsTrigger value="gantt" onClick={() => setExampleCode(examples.gantt)}>
                      Gantt
                    </TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
            </div>
            <div className="h-[400px] border-0 overflow-hidden">
              <div ref={editorRef} className="h-full w-full" />
            </div>
            {error && (
              <div className="mt-2 p-3 bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md">
                <div className="flex items-start">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-red-500 mr-2 mt-0.5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                      clipRule="evenodd"
                    />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-red-800 dark:text-red-200">Syntax Error</h4>
                    <p className="text-xs text-red-700 dark:text-red-300 mt-1">{error.message}</p>
                    {error.line && (
                      <p className="text-xs text-red-600 dark:text-red-400 mt-0.5">
                        Line: {error.line}{" "}
                        <button
                          className="underline ml-1 focus:outline-none"
                          onClick={() => {
                            if (editorViewRef.current && error.line) {
                              highlightErrorLine(error.line)
                            }
                          }}
                        >
                          Jump to line
                        </button>
                      </p>
                    )}
                  </div>
                </div>
              </div>
            )}
          </Card>
        </div>

        <div>
          <Card className="border rounded-lg overflow-hidden">
            <div className="bg-muted p-2 border-b flex justify-between items-center">
              <div className="flex items-center">
                <span className="text-sm font-medium">Preview</span>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => setZoom((prev) => Math.max(0.5, prev - 0.1))}
                >
                  <span className="text-lg">-</span>
                </Button>
                <span className="text-xs w-12 text-center">{Math.round(zoom * 100)}%</span>
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => setZoom((prev) => Math.min(2, prev + 0.1))}
                >
                  <span className="text-lg">+</span>
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => {
                    setZoom(1)
                    setPan({ x: 0, y: 0 })
                  }}
                >
                  <span className="text-xs">Reset</span>
                </Button>
              </div>
            </div>
            <div
              className="min-h-[400px] overflow-hidden bg-[#f8f9fa] dark:bg-[#1e1e1e] relative"
              style={{ cursor: isDragging ? "grabbing" : "grab" }}
              onMouseDown={(e) => {
                setIsDragging(true)
                setDragStart({ x: e.clientX, y: e.clientY })
              }}
              onMouseMove={(e) => {
                if (isDragging) {
                  setPan((prev) => ({
                    x: prev.x + (e.clientX - dragStart.x),
                    y: prev.y + (e.clientY - dragStart.y),
                  }))
                  setDragStart({ x: e.clientX, y: e.clientY })
                }
              }}
              onMouseUp={() => setIsDragging(false)}
              onMouseLeave={() => setIsDragging(false)}
              onWheel={(e) => {
                e.preventDefault()
                const delta = e.deltaY > 0 ? -0.1 : 0.1
                setZoom((prev) => Math.min(Math.max(0.5, prev + delta), 2))
              }}
            >
              <div
                className="absolute left-1/2 top-1/2 transform origin-center transition-transform duration-100 ease-linear"
                style={{
                  transform: `translate(-50%, -50%) translate(${pan.x}px, ${pan.y}px) scale(${zoom})`,
                }}
              >
                <div ref={previewRef} dangerouslySetInnerHTML={{ __html: svg }} />
              </div>
            </div>
          </Card>
        </div>
      </div>

      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Mermaid Syntax Guide</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Card className="p-4">
            <h3 className="font-medium mb-2">Flowchart</h3>
            <pre className="text-xs bg-muted p-2 rounded overflow-x-auto">
              {`graph TD
    A[Start] --> B{Decision}
    B -->|Yes| C[Result]
    B -->|No| D[Another]`}
            </pre>
          </Card>
          <Card className="p-4">
            <h3 className="font-medium mb-2">Sequence Diagram</h3>
            <pre className="text-xs bg-muted p-2 rounded overflow-x-auto">
              {`sequenceDiagram
    Alice->>John: Hello John
    John-->>Alice: Hi Alice`}
            </pre>
          </Card>
        </div>
      </div>
    </div>
  )
}

