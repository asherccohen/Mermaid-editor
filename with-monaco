"use client"

import { useEffect, useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card } from "@/components/ui/card"
import { Download, Copy, Code, Moon, Sun, Share2 } from "lucide-react"
import { useTheme } from "next-themes"
import mermaid from "mermaid"
import Editor, { type Monaco } from "@monaco-editor/react"
import type { editor } from "monaco-editor"
import * as monaco from "monaco-editor"

// Add this type declaration at the top of your file
declare global {
  interface Window {
    monaco: typeof import("monaco-editor")
  }
}

export default function MermaidEditor() {
  const [code, setCode] = useState<string>(
    `graph TD
  A[Start] --> B{Is it working?}
  B -->|Yes| C[Great!]
  B -->|No| D[Debug]
  D --> B`,
  )
  const [svg, setSvg] = useState<string>("")
  const [copied, setCopied] = useState(false)
  const [zoom, setZoom] = useState(1)
  const [pan, setPan] = useState({ x: 0, y: 0 })
  const [isDragging, setIsDragging] = useState(false)
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })
  const { theme, setTheme } = useTheme()
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null)
  // Add a new state for error tracking below other state declarations
  const [error, setError] = useState<{ message: string; line?: number } | null>(null)
  // Add this to your component near the other refs
  const renderTimeout = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    mermaid.initialize({
      startOnLoad: true,
      theme: theme === "dark" ? "dark" : "default",
      securityLevel: "loose",
    })
    renderDiagram()

    // Prevent page scrolling when using the mouse wheel in the preview area
    const preventScroll = (e: WheelEvent) => {
      if ((e.target as HTMLElement).closest(".overflow-hidden")) {
        e.preventDefault()
      }
    }

    document.addEventListener("wheel", preventScroll, { passive: false })
    return () => document.removeEventListener("wheel", preventScroll)
  }, [code, theme])

  // Replace the renderDiagram function with this improved version that handles errors
  const renderDiagram = async () => {
    try {
      // Clear any previous errors
      setError(null)

      // If we have an editor reference, remove any error decorations
      if (editorRef.current) {
        editorRef.current.deltaDecorations([], [])
      }

      const { svg } = await mermaid.render("mermaid-diagram", code)
      setSvg(svg)
    } catch (err: any) {
      console.error("Failed to render diagram:", err)

      // Extract error information
      const errorMessage = err.message || "Syntax error in diagram"
      let lineNumber: number | undefined

      // Try to extract line number from the error message
      // Common format in Mermaid errors: "Parse error on line X:"
      const lineMatch = errorMessage.match(/line (\d+)/i)
      if (lineMatch && lineMatch[1]) {
        lineNumber = Number.parseInt(lineMatch[1], 10)
      }

      setError({ message: errorMessage, line: lineNumber })

      // Highlight the error line in the editor if we have a line number and editor reference
      if (lineNumber && editorRef.current) {
        const decorations = [
          {
            range: new monaco.Range(lineNumber, 1, lineNumber, 1),
            options: {
              isWholeLine: true,
              className: "bg-red-100 dark:bg-red-900/30",
              glyphMarginClassName: "bg-red-500",
              glyphMarginHoverMessage: { value: errorMessage },
            },
          },
        ]

        editorRef.current.deltaDecorations([], decorations)

        // Jump to the error line
        editorRef.current.revealLineInCenter(lineNumber)
      }

      // Still render a fallback diagram or the last valid diagram
      // This ensures the preview area doesn't go blank on errors
    }
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const downloadSvg = () => {
    const blob = new Blob([svg], { type: "image/svg+xml" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "diagram.svg"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const examples = {
    flowchart: `graph TD
    A[Start] --> B{Is it working?}
    B -->|Yes| C[Great!]
    B -->|No| D[Debug]
    D --> B`,
    sequence: `sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!`,
    classDiagram: `classDiagram
    class Animal {
      +name: string
      +eat(): void
      +sleep(): void
    }
    class Dog {
      +bark(): void
    }
    Animal <|-- Dog`,
    gantt: `gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2023-01-01, 30d
    Another task     :after a1, 20d
    section Another
    Task in sec      :2023-01-12, 12d
    another task     :24d`,
  }

  // Update the handleEditorDidMount function to add error indicator functionality
  const handleEditorDidMount = (editor: editor.IStandaloneCodeEditor, monaco: Monaco) => {
    editorRef.current = editor

    // Store monaco globally for use in decorations
    window.monaco = monaco

    // Define a simple language for Mermaid
    monaco.languages.register({ id: "mermaid" })
    monaco.languages.setMonarchTokensProvider("mermaid", {
      tokenizer: {
        root: [
          [/graph|flowchart|sequenceDiagram|classDiagram|gantt/, "keyword"],
          [/-->|==>|-.->|--x|==x|-.->x|<-->|<-.->|x-->|x-.->/, "operator"],
          [/\[|\]|\{|\}|$$|$$/, "delimiter.bracket"],
          [/".*?"/, "string"],
          [/'.*?'/, "string"],
          [/\|.*?\|/, "variable"],
          [/\d+/, "number"],
          [/\w+/, "identifier"],
        ],
      },
    })

    // Add some basic completions
    monaco.languages.registerCompletionItemProvider("mermaid", {
      provideCompletionItems: () => {
        return {
          suggestions: [
            {
              label: "graph",
              kind: monaco.languages.CompletionItemKind.Keyword,
              insertText:
                "graph TD\n  A[${1:Start}] --> B{${2:Decision}}\n  B -->|${3:Yes}| C[${4:Result}]\n  B -->|${5:No}| D[${6:Another}]",
              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
              documentation: "Create a flowchart",
            },
            {
              label: "sequenceDiagram",
              kind: monaco.languages.CompletionItemKind.Keyword,
              insertText: "sequenceDiagram\n  ${1:Alice}->>>${2:Bob}: ${3:Hello}\n  ${2:Bob}-->>>${1:Alice}: ${4:Hi}",
              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
              documentation: "Create a sequence diagram",
            },
            {
              label: "classDiagram",
              kind: monaco.languages.CompletionItemKind.Keyword,
              insertText:
                "classDiagram\n  class ${1:ClassName} {\n    ${2:+attribute: type}\n    ${3:+method(): returnType}\n  }",
              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
              documentation: "Create a class diagram",
            },
            {
              label: "gantt",
              kind: monaco.languages.CompletionItemKind.Keyword,
              insertText:
                "gantt\n  title ${1:Project Schedule}\n  dateFormat YYYY-MM-DD\n  section ${2:Section}\n  ${3:Task} :${4:a1}, ${5:2023-01-01}, ${6:30d}",
              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
              documentation: "Create a Gantt chart",
            },
          ],
        }
      },
    })

    // Add onChange handler to clear errors when editing
    editor.onDidChangeModelContent(() => {
      // Delay the rendering to avoid too many renders while typing
      clearTimeout(renderTimeout.current)
      renderTimeout.current = setTimeout(() => {
        renderDiagram()
      }, 500)
    })
  }

  return (
    <div className="container mx-auto p-4 max-w-7xl">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Mermaid Editor</h1>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" onClick={() => setTheme(theme === "dark" ? "light" : "dark")}>
            {theme === "dark" ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
          </Button>
          <Button variant="outline" size="sm" onClick={() => copyToClipboard()}>
            <Copy className="h-4 w-4 mr-2" />
            {copied ? "Copied!" : "Copy"}
          </Button>
          <Button variant="outline" size="sm" onClick={downloadSvg}>
            <Download className="h-4 w-4 mr-2" />
            Export SVG
          </Button>
          <Button variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-4">
          <Card className="border rounded-lg overflow-hidden">
            <div className="bg-muted p-2 border-b flex justify-between items-center">
              <div className="flex items-center">
                <Code className="h-4 w-4 mr-2" />
                <span className="text-sm font-medium">Editor</span>
              </div>
              <div className="flex gap-2">
                <Tabs defaultValue="flowchart" className="w-full">
                  <TabsList className="grid grid-cols-4 h-8">
                    <TabsTrigger value="flowchart" onClick={() => setCode(examples.flowchart)}>
                      Flowchart
                    </TabsTrigger>
                    <TabsTrigger value="sequence" onClick={() => setCode(examples.sequence)}>
                      Sequence
                    </TabsTrigger>
                    <TabsTrigger value="class" onClick={() => setCode(examples.classDiagram)}>
                      Class
                    </TabsTrigger>
                    <TabsTrigger value="gantt" onClick={() => setCode(examples.gantt)}>
                      Gantt
                    </TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
            </div>
            <div className="h-[400px] border-0">
              <Editor
                height="400px"
                defaultLanguage="mermaid"
                language="mermaid"
                theme={theme === "dark" ? "vs-dark" : "light"}
                value={code}
                onChange={(value) => setCode(value || "")}
                options={{
                  minimap: { enabled: false },
                  scrollBeyondLastLine: false,
                  fontSize: 14,
                  wordWrap: "on",
                  tabSize: 2,
                  automaticLayout: true,
                  glyphMargin: true, // Enable glyph margin for error indicators
                  scrollbar: {
                    vertical: "visible",
                    horizontal: "visible",
                  },
                }}
                onMount={handleEditorDidMount}
              />
            </div>
            {error && (
              <div className="mt-2 p-3 bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md">
                <div className="flex items-start">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-red-500 mr-2 mt-0.5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                      clipRule="evenodd"
                    />
                  </svg>
                  <div>
                    <h4 className="text-sm font-medium text-red-800 dark:text-red-200">Syntax Error</h4>
                    <p className="text-xs text-red-700 dark:text-red-300 mt-1">{error.message}</p>
                    {error.line && (
                      <p className="text-xs text-red-600 dark:text-red-400 mt-0.5">
                        Line: {error.line}{" "}
                        <button
                          className="underline ml-1 focus:outline-none"
                          onClick={() => {
                            if (editorRef.current && error.line) {
                              editorRef.current.focus()
                              editorRef.current.revealLineInCenter(error.line)
                              editorRef.current.setPosition({ lineNumber: error.line, column: 1 })
                            }
                          }}
                        >
                          Jump to line
                        </button>
                      </p>
                    )}
                  </div>
                </div>
              </div>
            )}
          </Card>
        </div>

        <div>
          <Card className="border rounded-lg overflow-hidden">
            <div className="bg-muted p-2 border-b flex justify-between items-center">
              <div className="flex items-center">
                <span className="text-sm font-medium">Preview</span>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => setZoom((prev) => Math.max(0.5, prev - 0.1))}
                >
                  <span className="text-lg">-</span>
                </Button>
                <span className="text-xs w-12 text-center">{Math.round(zoom * 100)}%</span>
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => setZoom((prev) => Math.min(2, prev + 0.1))}
                >
                  <span className="text-lg">+</span>
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => {
                    setZoom(1)
                    setPan({ x: 0, y: 0 })
                  }}
                >
                  <span className="text-xs">Reset</span>
                </Button>
              </div>
            </div>
            <div
              className="min-h-[400px] overflow-hidden bg-[#f8f9fa] dark:bg-[#1e1e1e] relative"
              style={{ cursor: isDragging ? "grabbing" : "grab" }}
              onMouseDown={(e) => {
                setIsDragging(true)
                setDragStart({ x: e.clientX, y: e.clientY })
              }}
              onMouseMove={(e) => {
                if (isDragging) {
                  setPan((prev) => ({
                    x: prev.x + (e.clientX - dragStart.x),
                    y: prev.y + (e.clientY - dragStart.y),
                  }))
                  setDragStart({ x: e.clientX, y: e.clientY })
                }
              }}
              onMouseUp={() => setIsDragging(false)}
              onMouseLeave={() => setIsDragging(false)}
              onWheel={(e) => {
                e.preventDefault()
                const delta = e.deltaY > 0 ? -0.1 : 0.1
                setZoom((prev) => Math.min(Math.max(0.5, prev + delta), 2))
              }}
            >
              <div
                className="absolute left-1/2 top-1/2 transform origin-center transition-transform duration-100 ease-linear"
                style={{
                  transform: `translate(-50%, -50%) translate(${pan.x}px, ${pan.y}px) scale(${zoom})`,
                }}
              >
                <div dangerouslySetInnerHTML={{ __html: svg }} />
              </div>
            </div>
          </Card>
        </div>
      </div>

      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Mermaid Syntax Guide</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Card className="p-4">
            <h3 className="font-medium mb-2">Flowchart</h3>
            <pre className="text-xs bg-muted p-2 rounded overflow-x-auto">
              {`graph TD
    A[Start] --> B{Decision}
    B -->|Yes| C[Result]
    B -->|No| D[Another]`}
            </pre>
          </Card>
          <Card className="p-4">
            <h3 className="font-medium mb-2">Sequence Diagram</h3>
            <pre className="text-xs bg-muted p-2 rounded overflow-x-auto">
              {`sequenceDiagram
    Alice->>John: Hello John
    John-->>Alice: Hi Alice`}
            </pre>
          </Card>
        </div>
      </div>
    </div>
  )
}

